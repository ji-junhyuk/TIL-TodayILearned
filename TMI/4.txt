<프로젝트 환경설정>
1. 프로젝트 생성
2. 라이브러리 살펴보기
3. View 환경설정
4. 빌드하고 실행하기

Project Metadata
Group : 보통 기업명이나 도메인을 넣는다.
Artifact : 빌드 되어 나온 결과물 

Dependencies
:Spring Web
:Thymeleaf(HTML을 만들어주는 템플릿 엔진)

Show option Menu(project 옆) -> Compact Middle Package (취향, 난 선택)

Settings(ctrl + alt + s) + gradle + option : gradle => intelij // 그래들을 통해서 실행하면 느릴 때가 있는데 바로 intelij로 실행하면 빠르다
Preferences Build, Execution, Deployment Build Tools Gradle
Build and run using: Gradle IntelliJ IDEA
Run tests using: Gradle IntelliJ IDEA



라이브러리
스프링 부트 라이브러리
spring-boot-starter-web
	spring-boot-starter-tomcat: 톰캣 (웹서버)
	spring-webmvc: 스프링 웹 MVC
spring-boot-starter-thymeleaf: 타임리프 템플릿 엔진(View)
spring-boot-starter(공통): 스프링 부트 + 스프링 코어 + 로깅
	spring-boot
		spring-core
	spring-boot-starter-logging
		logback, slf4j
			실무에서는 System.out.println 쓰지 않는다. log로 출력을 해야 한다. 심각한 에러를 따로 모아서 관리할 수 있기 때문이다. (로그파일 관리 측면)

테스트 라이브러리
spring-boot-starter-test
	junit: 테스트 프레임워크
	mockito: 목 라이브러리
	assertj: 테스트 코드를 좀 더 편하게 작성하게 도와주는 라이브러리
	spring-test: 스프링 통합 테스트 지원


Welcome Page 만들기 =>spring.io -> projects => spring Boot => Learn => 2.3.1 => Spring Boot features => 검색(Welcome page)
resources/static/index.html
<!DOCTYPE HTML>
<html>
<head>
 <title>Hello</title>
 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
<body>
Hello
<a href="/hello">hello</a>
</body>
</html>


thymeleaf 템플릿 엔진
package hello.hellospring.controller
Class HelloController

package hello.hellospring.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HelloController {

    @GetMapping
    public String hello(Model model) {
        model.addAttribute("data", "hello!!");
        return "hello";
    }
}



resources/template/hello.html
<!DOCTYPE HTML>
<html xmlns:th="http://www.thymeleaf.org">
<head>
 <title>Hello</title>
 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
<body>
<p th:text="'안녕하세요. ' + ${data}" >안녕하세요. 손님</p>
</body>
</html>

./ gradlew clean
./ gradlew build
cd build/libs
java -jar tab키
문제 : index.html 이 안뜨고 바로 Hello.html이 시작된다.
원래는 localhost:8080/hello : 여기에 hello spring!! 이렇게 떳으면
지금은 localhost:8080 에 hello spring!!이 바로 시작된다.





<스프링 웹 개발 기초>
1. 정적 컨텐츠
2. MVC와 템플릿 엔진
3. API

1
resoutces/templates/hello-static.html
<!DOCTYPE HTML>
<html>
<head>
    <title>static content</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
<body>
정적 컨텐츠 입니다.
</body>
</html>


2 
hello.hellospring.controller
HelloController Class
 @GetMapping("hello-mvc")
    public String helloMVC(@RequestParam("name") String name, Model model) {
        model.addAttribute("name", name);
        return "hello-template";
    }
    
 resources/templates/hello-template
 <html xmlns:th="http://www.thymeleaf.org">
<body>
<p th:text="'hello ' + ${name}">hello! empty</p>
</body>
</html>

/home/junto/projects/juntoplayground/TIL-TodayILearned/hello-spring/src/main/resources/templates/hello-template.html (abolute path)
=> 홈페이지에 바로 검색해서 보던데 나는 안됨.
    
3
    @GetMapping("hello-string")
    @ResponseBody
    public String helloString(@RequestParam("name") String name) {
        return "hello " + name;
    }

    @GetMapping("hello-api")
    @ResponseBody
    public Hello helloapi(@RequestParam("name") String name) {
        Hello hello = new Hello();
        hello.setName(name);
        return hello;
    }

    static class Hello {
        private String name;

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }
    }
    => public Hello 만 치고 static class Hello, private 입력 후 getter setter 후 helloapi로 친다
    
    
    

<회원 관리 예제 - 백엔드 개발>
1. 비즈니스 요구사항 정리
2. 회원 도메인과 리포지토리 만들기
3. 회원 리포지토리 테스트 케이스 작성
4. 회원 서비스 개발
5. 회원 서비스 테스트


hello.hellospring.domain
Member Class

package hello.hellospring.domain;
public class Member {

    private Long id;
    private String name;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}


hello.hellospring.repository
public class MemberRepository

package hello.hellospring.repository;
import hello.hellospring.domain.Member;

import java.util.List;
import java.util.Optional;

public interface MemberRepository {
    Member save(Member member);

    Optional<Member> findById(Long id);

    Optional<Member> findByName(String name);

    List<Member> findAll();
}

hello.hellospring.repository
public class MemorymemberRepository

package hello.hellospring.repository;
import hello.hellospring.domain.Member;
import java.util.*;
public class MemoryMemberRepository implements MemberRepository {

    private static Map<Long, Member> store = new HashMap<>();
    private static long sequence = 0L;

    @Override
    public Member save(Member member) {
        member.setId(++sequence);
        store.put(member.getId(), member);
        return member;
    }

    @Override
    public Optional<Member> findById(Long id) {
        return Optional.ofNullable(store.get(id));
    }

    @Override
    public Optional<Member> findByName(String name) {
        return store.values().stream()
                .filter(member -> member.getName().equals(name))
                .findAny();
    }

    @Override
    public List<Member> fianAll() {
        return new ArrayList<>(store.values());
    }
}


회원 리포지토리 테스트 케이스 작성
test
hello.hellospring.repository
class MemoryMemberRepositoryTest


//3 epository.findById(member.getId()).get() //3   Member result = repository.findById(member.getId()).get();



class MemoryMemberRepositoryTest {

    MemberRepository repository = new MemoryMemberRepository(); //1

    @Test //2
    public void save() {
        Member member = new Member();
        member.setName("spring");

        repository.save(member);

        Member result = repository.findById(member.getId()).get();//3
        //System.out.println("result = " + (result == member));
        Assertions.assertEquals(member, result);
        assertThat(member).isEqualTo(result);
    }

    @Test
    public void findByName() {
        Member member1 = new Member();
        member1.setName("spring1");
        repository.save(member1);

        Member member2 = new Member();
        member2.setName("spring2");
        repository.save(member2);

        Member result = repository.findByName("spring1").get();

        assertThat(result).isEqualTo(member1);
    }

    @Test
    public void findAll() {
        Member member1 = new Member();
        member1.setName("Spring1");
        repository.save(member1);

        Member member2 = new Member();
        member2.setName("Spring2");
        repository.save(member2);

        List<Member> result = repository.findAll();

        assertThat(result.size()).isEqualTo(2);

    }

}

=> class MemoryMemberRepositoryTest
aftereach 추가	

=> class MemoryMemberRepositoryTest
public void clearStore() {
        store.clear();
    }
    
=> class MemoryMemberRepositoryTest
클리어스토어 추가
   public void afterEach() {
        repository.clearStore();
    }
    

회원 서비스 개발(헷갈리는 부분 많아)
hello.hellospring.service
MemberService Class

package hello.hellospring.service;

import hello.hellospring.domain.Member;
import hello.hellospring.repository.MemberRepository;
import hello.hellospring.repository.MemoryMemberRepository;

import java.util.List;
import java.util.Optional;

public class MemberService {

    private  final MemberRepository memberRepository = new MemoryMemberRepository();

    /*
    Sign up
     */
    public Long join(Member member) {

        validateDuplicateMember(member); //Duplicate Member Verification

//        Optional<Member> result = memberRepository.findByName(member.getName());//1 ctrl + v
//        result.ifPresent(m ->{
//            throw new IllegalStateException("already existing member.")
//        });

        memberRepository.save(member);
        return member.getId();
    }

    private void validateDuplicateMember(Member member) {
        memberRepository.findByName(member.getName())
                .ifPresent(m -> {
                    throw new IllegalStateException("already existing member.");
                });
    }
    /*
    View all members
     */
    public List<Member> findMembers() {
        return memberRepository.findAll();
    }

    public Optional<Member> findOne(Long memberId) {
        return memberRepository.findById(memberId);
    }
}



ctrl alt shift L : 코드정리

회원 서비스 테스트 DI 개념 17분 20초
class MemberService 에서 ctrl shift t 눌러 테스트 케이스 작성

    
    
package hello.hellospring.service;

import hello.hellospring.domain.Member;
import hello.hellospring.repository.MemoryMemberRepository;
import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import java.util.Optional;

import static org.assertj.core.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.*;
    
class MemberServiceTest {

    MemberService memberService = new MemberService();
  @Test
    void join() {
        //given
        Member member = new Member();
        member.setName("spring");

        //when
        Long saveId = memberService.join(member);

        //then
        Member findMember = memberService.findOne(saveId).get();
        assertThat(member.getName()).isEqualTo(findMember.getName()); //assertj
    }

    @Test
    public void DuplicateMemberException() {
        //given
        Member member1 = new Member();
        member1.setName("spring");

        Member member2 = new Member();
        member2.setName("spring");

        //when
        memberService.join(member1);
        IllegalStateException e = assertThrows(IllegalStateException.class, () -> memberService.join(member2));

        assertThat(e.getMessage()).isEqualTo("already existing member.");
 /*       try {
            memberService.join(member2);
            fail();
        } catch (IllegalStateException e) {
            assertThat(e.getMessage()).isEqualTo("already existing member.");
        }*/
        //then
    }


    @Test
    void findMembers() {
    }

    @Test
    void findOne() {
    }
}


 MemoryMemberRepository memberRepository = new MemoryMemberRepository();

    @AfterEach
    public void afterEach() {
        memberRepository.clearStore();
    } 

    나중에 추가
    
    
    
public class MemberService {

private  final MemberRepository memberRepository = new MemoryMemberRepository();

수정한다

  private final MemberRepository memberRepository;  // 이걸로 생성자 만든다

    public MemberServiceTest(MemberRepository memberRepository) {
        this.memberRepository = memberRepository;
    }

    
 MemberServiceTest Class
 
 MemberService memberService = new MemberService();
 MemoryMemberRepository memberRepository = new MemoryMemberRepository();
  
 => 수정한다
  MemberService memberService;
 MemoryMemberRepository memberRepository;
   
   BeforeEach 추가한다
     @BeforeEach
    public void beforeEach() {
        memberRepository = new MemoryMemberRepository();
        memberService = new MemberService(memberRepository);
    }

   
    
   
   



<스프링 빈과 의존관계>
1. 컴포넌트 스캔과 자동 의존관계 설정
2. 자바 코드로 직접 스프링 빈 등록하기

hello.hellospring.controller
MemberController Class

@Controller
public class MemberController {

    //private final MemberService memberService = new MemberService();
    private final MemberService memberService;

    @Autowired
    public MemberController(MemberService memberService) {  //constructor
        this.memberService = memberService;
    }
}

서비스 추가하기
=>
@Service
public class MemberService {

리포지터리 추가하기
=>
@Repository
public class MemoryMemberRepository implements MemberRepository {

인젝션 주입(Autowired 추가)
=>
MemberService Class
  @Autowired
    public MemberService(MemberRepository memberRepository) {
        this.memberRepository = memberRepository;
        
      => run 
      
 자바 코드로 직접 스프링 빈 등록하기
(hello.hellospring) 
SpringConfig Class


@Configuration
public class SpringConfig {
    
    @Bean
    public MemberService memberService() {
        return new MemberService(memberRepository());
    }

    @Bean
    public MemberRepository memberRepository() {
        return new MemoryMemberRepository();
    }
}





<회원 관리 예제 - 웹 MVC 개발>
1. 회원 웹 기능 - 홈 화면 추가
2. 회원 웹 기능 - 등록
3. 회원 앱 기능 - 조회


<스프링 DB 접근 기술>
1. H2 데이터베이스 설치
2. 순수 JDBC
3. 스프링 통합 테스트
4. 스프링 JdbcTemplate
5. JPA
6. 스프링 데이터 JPA

<AOP>
1. Aop가 필요한 상황
2. Aop적용

<다음으로>
다음으로













































































































































































































