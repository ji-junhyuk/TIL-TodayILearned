깃이란 무엇인가? 
깃이란 분산 버전 관리 시스템이다. 깃은 파일의 마지막 모습을 스냅샷으로 취급하며 저장한다. 언제든지 특정 시점으로 이동할 수 있다. 시간에 따라 수정 기록이 있어서 누가 작업을 하고 어떤 문제를 발생시켰는지도 알 수 있다. 이런 기능을 쉽게 이용할 수 있다는 것이 장점이다. 깃을 사용하지 않고 버전을 관리하려고 노력한다면 아마 이런 모습일 것이다. 




깃 명령어는 CLI(Command Line Interface)에서 사용된다. CLI에서는 Git의 모든 기능을 지원하고 있다. 소스트리 등 GUI프로그램에서는 Git의 일부 기능만 사용하기에 단순하다. CLI를 사용할 수 있으면 GUI도 쉽게 사용할 수 있다. 매력적인 깃의 여러 기능을 느끼기 위해 CLI 깃 명령어를 살펴보도록 한다.





깃의 4가지 상태

깃을 잘 이용하려면 이를 잘 이해해야 한다. 워킹 디렉토리란 작업을 시작하는 공간이다. 여기서는 파일을 만들거나 수정하는 작업을 한다. git add 명령어를 이용하면 파일들이 Staging Area에 저장된다. 여기에 있는 파일들은 커밋을 할 수 있는 상태가 된다. 로컬 저장소에 commit을 하게 되면 파일이 영구적으로 저장된다. 이를 원격 저장소에 연결하면 컴퓨터가 바뀌어도 작업 파일을 불러올 수 있다. 또한 여러명이 하나의 원격 저장소를 통해서 협업도 가능하다. 





깃 기초 명령어
1. 전역 변수 설정

git config --global user.name "jijunhyuk"
git config --global user.email "takeoutmoneywallet@naver.com"




2. .gitignore 설정

유용한 템플릿 : github.com/github/gitignore





3. SSH key 사용


cd /home/junto
ssh-keygen (아래 화면이 나올 때까지 엔터를 누른다)
cd .ssh
cat id_rsa.pub (ssh-rsa 부터 복사한다)
github Settings - SSH and GPG keys - New SSH key에 해당 키를 추가한다.





4. 로컬 저장소를 새로 만들기

1) Working Directory 만들기
mkdir JavaAplication

2) 깃 로컬 저장소로 만들기
git init

// 1)2)을 한 번에 할 수도 있다.
git init JavaAplication 

3) 작업할 파일 만들기
vi function1.txt

4) Staging area에 커밋할 파일 기록하기
git add function1.txt

// 여러 파일을 한 번에 Staging area에 기록하기
git add .

5) Staging area에 있는 파일들 커밋하기
git commit -m "first commit"

6) 원격 저장소에 연결하기
git remote add origin <url> 
// 해당 url을 가진 origin 이름의 원격 저장소에 연결한다는 것이다. origin이 아닌 다른 이름으로 사용해도 무방

7) 원격 저장소 연결 확인하기
git remote -v

8) HTTPS 를 이용해 원격 저장소에 푸쉬하기
git push origin master 
// origin이라는 원격 저장소 master(기본)브랜치에 푸쉬하겠다는 의미이다. 




5. 기존에 있는 원격 저장소를 이용하기

1) pull 이용하기

git init           // 로컬 저장소 만들기
git pull <url>     // pull로 내려받기


2) clone 이용하기

git clone <url>    // clone으로 내려받기 




6. 그 외 기본 명령어

1) 깃 상태 보기

git status


2) 깃 커밋 내역 보기

git log

자주 사용하는 옵션
--stat
--oneline
--branch
--graph


3) 수정 전으로 되돌리기

git checkout -- <file>
git restore -- <file>


4) add와 commit 한번에 하기

git commit -am "commit message"


5) 파일 변경 사항 쉽게 확인하기

git diff


6) Staging Area 에서 내리기

git reset


7) Commit 되돌리기(되돌리고 싶은 커밋 해시 코드 복사)

git reset 04e801f312ac1a571799c492a86c0a6c7564b804 // 변경 기록 삭제
git revert 04e801f312ac1a571799c492a86c0a6c7564b804 // 변경 기록 유지

//git reset <option> <commitHash>
- option : 1soft, 2mixed(default), 3hard(NotRestore)
- commitHash : HEAD^(바로 전 커밋해시) , HEAD~3


8) 이전 커밋 메시지 수정하기

git commit --amend

	git clone <url> <저장할 디렉토리이름(선택)> 



