제목 : 프로그래밍이 보이는 그림책

# 들어가기 전에 : 컴퓨터안의 소프트웨어

컴퓨터 : 전자계산기, 미리 정해진 절차에 따라 자동으로 계산 등을 수행하는 기계의 총칭
컴퓨터 내부에는 <프로그램>이라 불리는 동작에 관한 작업 지시서가 있어 이를 바탕으로 각종 처리가 진행된다.

컴퓨터 : 하드웨어와 소프트웨어로 구성된다.
하드웨어 : 컴퓨터에 사용되는 부품과 부품을 조합한 기계(본체, 디스플레이, 키보드, 마우스, 메인보드 등) //스마트폰이나 태블릿에서는 본체와 그 안에 내장된 각종 부품
하드웨어는 단순한 기계장치로 하드웨어만으로는 동작하지 않는다. 명령을 따라서 실행하는 데 이 명령의 집합을 <프로그램>이라고 한다.
(widdows, mac os, 문서 작성 애플리케션 등 모두 소프트웨어에 해당)

컴퓨터를 움직이게 하는 반도체와 트랜지스터
트랜지스터 : 전기 신호의 흐름을 온/오프하는 스위치 역활과 약한 전기 신호를 강한 신호로 바꾸는 증폭기 역활을 하는 작은 부품(반도체소자)이다.
이 트렌지스터를 조합하여 전기의 흐름을 제어해 컴퓨터가 조건을 판단할 수 있게 된다.

실리콘 직접회로(IC, Integrated Circuit) : 수많은 트랜지스터를 하나의 기판 위에 집적하여 회로를 만들고, 다양한 기능을 넣은 전자부품이다.

컴퓨터의 5대 요소 
1. 입력 장치 : 컴퓨터에 명령을 내리거나 처리할 데이터를 보내는 장치 (눈, 귀) - 마우스, 키보드
2. 제어 장치 : 명령을 바르게 실행하기 위해 동작을 제어하는 장치 (뇌, 중추신경) - CPU
3. 연산 장치 : 실제로 처리를 실행하는 장치 (머리) - CPU
4. 기억 장치 : 입력된 명령과 프로그램, 데이터, 처리한 결과 등을 기억과 저장하는 장치 (기억) - 메모리(주기억장치), 하드디스크, CD-rom
5. 출력 장치 : 조작 명령에 대한 응답과 처리 결과를 인간이 알 수 있는 형태로 출력하는 장치 (입, 손) - 디스플레이, 프린터


기억장치
1. 메모리 : 입력된 명령이나 프로그램, 데이터, 처리 결과 등을 일시적으로 기억하는 장치이다. 메민 메모리 또는 주기억장치라고 한다.
2. 보조기억장치 : 용량이 크고 정보를 장기적으로 보존할 수 있지만 읽고 쓰는 시간이 CPU의 처리 속도에 비해 매우 느리다.(하드디스크)
하드디스크 등에 저장된 정보는 반드시 메모리로 불러와서 CPU가 처리한다.



# 1장 : 컴퓨터 안의 소프트웨어

소프트웨어
- 기본 소프트웨어(OS, operating system) : 컴퓨터 전체를 관리하고 제어하며 하드웨어에 의존하지 않고 애플리케이션을 실행할 수 있는 환경을 제공하는 소프트웨어
- 응용 소프트웨어(Aplication) : 문서 작성, 표 계산, 게임, 웹 서핑, 메일 송수신 등의 용도에 따른 다양한 환경을 제공하는 소프트웨어
- 미들웨어 : OS와 애플리케이션 사이에 위치하여 각각의 범용적인 기능을 소프트웨어로 만든 것(데이터베이스 관리시스템-DBMS, 웹 서버, 트랜잭션 모니터 등)

프로세스 : 메모리에 할당된 프로그램
스레드(Thread) : 프로세스 내 처리의 흐름
멀티 스레드 : 복수의 처리를 동시에 병행하여 실행하는 흐름
- 스레드가 프로세스를 동시에 복수 실행하는 것과 다른 점은 같은 프로세스의 스레드는 같은 메모리 공간을 참조한다는 것입니다. 스레드는 CPU를 사용하는 최소 단위이며, 경량 프로세스라고도 불린다.


- 소프트웨어란 프로그램과 관련된 모든 데이터를 포함해 부르는 말
- 컴퓨터가 프로그램을 실행할 때는 하드디스크에 설치된 프로글매을 메모리로 불러와 실행한다.
- 컴퓨터는 복수의 프로세스와 스레드를 동시에 실행해 효율적으로 처리할 수 있다.
- 우리는 수 많은 프로그래밍 언어로 하나의 프로그램을 만들게 된다. 실제로 프로그램을 실행하려면 컴퓨터가 이해할 수 있는 기계어로
변환(컴파일)해줄 필요가 있다. 프로그램 실행 전에 일괄적으로 변환하는 방법을 <컴파일러 방식>, 순차적으로 변환하면서 실행하는 방법을 <인터프리터 방식>이라고 한다.
각각의 장단점이 존재한다.

os
- 기종별 차이를 흡수하는 역활을 한다. (개발의 편이성)
- os의 역활
	-1. 프로세스 관리 : 프로그램 실행 단위를 관리한다. CPU에 관리를 맡기거나 싫애하는 순서 관리하여 복수의 소프트웨어 동시에 실행할 수 있게 한다.
	-2. 메모리 관리 : 프로그램을 메인 메모리의 이용 가능 영역에 할당하거나 메모리가 필요 없어졌을 때 해제한다.
	-3. 디스크 관리 : 보조기억장치에 파일을 기록하거나 이에 기록된 파일을 읽어 들인다.
	-4. 네트워크 관리 : 통신장치와 네트워크를 제어하거나 관리한다.
	
윈도우즈의 서비스, os의 데몬
-업데이트, 방화벽, 이벤트 로그, DHCP 클라이언트(컴퓨터 IP 주소와 DNS 서버를 설정하고 갱신한다)

빌드, 메이크 : 컴파일과 컴파일러 -> 실행 파일(컴파일한 복수의 관련 파일을 링크라는 작업으로 연결하여 만듭니다)
소스 파일(프로그램을 파일로 저장) -> 컴파일러 (소스 파일 등 컴퓨터 언어로 번역) -> 오브젝트 파일 (컴파일러에 의해 기계어로 번역된 상태의 프로그램 소스) -> 링커(오브젝트 파일과 라이브러리 파일을 결합-링크하여 하나의 실행파일을 만든다), 라이브러리 파일 (기계어로 기술된 함수와 데이터를 모아둔 것)

컴파일러 : 실행 시 변환할 필요 없으므로 처리 속도 빠르다. 특별한 소프트웨어 필요없고 단독으로 실행가능. 프로그램 내용이 보이지 않아 변조하기 어렵다.
단점 : 프로그램의 내용이 보이ㅣㅈ 않아 작성자가 내용을 확인하거나 변경하기 어렵다. 프로그램을 작성하거나 변경하려면 실행 파일로 변환해야 하므로 바로
실행하여 확인할 수 없다. 실행하기 위해서는 프로그램을 어느정도 만들어 놓을 필요가 있다.

인터프리터 : 프로그램이 변환되어 있지 않으므로 내용을 확인하거나 변경하기 쉽고 프로그램을 작성 및 변경하고 바로 실행할 수 있다. 프로글매의 일부라도 실행하여 확인할 수 있다. 프로그래밍 학습에 적합하다.
하지만 기계어로 변환해 나가면서 실행하므로 컴파일러형보다 처리 속도가 느리다. 프로그램의 내용이 보이므로 분석되거나 변조될 우려가 있다. 실행하기 위해서는
전용 소프트웨어(인터프리터)가 필요하다.

규모가 작은 프로그램이나 사용자가 차례대로 입력하거나 선택해야 하는 대화형 프로그램은 인터프리터를 사용합니다.

프로그램이 상식 (CPU 속도)
전자 제품에 이용되는 전자 부품들은 매우 빠르게 작동합니다. CPu는 1개의 명령을 수 나노 초의 속도로 실행합니다. 나노초란 10억분의 1단위입니다. 하지만 마우스나
키보드가 이렇게 빨리 움직일 수 있을까요? 일반적으로 전자 부품일수록 빠르고, 기계부속이 들어가 물리적 구조가 포함될수록 느려진다는 이론이 성립됩니다.

CPU속도는 클럭수(클럭 주파수)에 따라서도 차이가 있습니다. 컴퓨터 내부 에는 수많은 장치가 작동하므로, 각 장치의 동작 속도가 다르면 서로 통신이 원활하지 못합니다. 컴퓨터는 각각의 장치를 동기화하기 위해 신호를 보내 동기화 타이밍을 잡습니다. 이 신호를 클럭이라고 합니다. 1초에 발생하는 클럭 수를 클럭 주파수라고 합니다. CPU는 매우 빠른 처리가 필요하므로 CPU 바깥족 장치의 기반이 되는 외부 클럭을 고속화한 내부 클럭에 의해 명령 실행 시간을 결정합니다.
CPU 속도 단위ㄴ에는 1초간 실행할 수 있는 MIPS. FLOPS가 있습니다.

# 2장 : 바이너리의 세계
우리는 보통 10진수를 사용하지만 컴퓨터는 2진수를 사용한다. 
기수 : 숫자를 표시할 때 어떤 자리의 가중값을 나타내는 수 (10진수의 가수는 10, 2진수의 기수는 2)
기수 변환 : 16진수를 2진수로, 10진수를 2진수로

16, 2진수에서 10진수로 변환
-> 각 자리의 값과 그 가자리의 가중값을 더한다 (n2)

10진수에서 2진수로 변환 
-> 11-> 2진수 , 나머지 1 1 0 1 나오면 1 0 1 1 이 된다.
-> 1055 -> 16진수, 나머지 15 1 4 나오면 -> 4 1 F 가 된다.

16진수와 2진수의 상호 변환
-> 2진수에서 16진수로 변경할 때는 낮은 자리부터 네자리씩 잘라 변환한다.
-> 16진수에서 2진수로 변경할 때는 한 자리마다 2진수로 변환한다.

비트 : 전자회로에 흐르는 전류의 스위치가 오프인지, 온인지를 나타내는 데이터의 단위이다. (컴퓨터에서 다루는 테이터의 최소단위)
바이트 : 8비트를 한 조로 한 정보의 단위입니다. 'B'로 표기합니다.
비트수와 값 
8 : 부호 O ~128, 127 // 부호 X 0 ~ 255
16 : 부호 O -32768~32767 // 부호 X 0 ~ 65535

소수표현방식
고정소수점, 부동소수점(가수부 소수점 위치가 고정되지 않음) 1.25 * 10^1 (1.25 = 가수부, 10 기수부, 1 지수부)
소수점 데이터 (단정도 8,23 와 배정도11,52) - 표현할 수 있는 값이 다르다.

부동소수점의 오차 0.1 + 0.2 + 0.3이 안된다.
이유 : 2진수로 관리되기 때문에 10진수를 정확하게 표현할 수 없다.
10진수 -> 2진수 구하는 법, 소수 부분에 2를 곱하고 소수부가 0이 될 때까지 계산을 반복한다.
0.1 x 2 0
0.2 x 2 0 
0.4 x 2 0
0.8 x 2 1
0.6 x 2 1
0.2 x 2 0
0.4 x 2 0
0.8 x 2 1
0.6 x 2 1
0.2 x 2 0 => 0.00011001100 (0011의 반복) 컴퓨터는 반올림한다.

비트연산 
*AND 논리곱 (양쪽의 비트가 1인 경우에만 1로)
*OR 논리합 (어느 한 쪽이 1인 경우에만 결과를 1로)
*NOT 논리부정 (비트의 값을 반전시킴 0은 1, 1은 0)
*XOR 배타적 논리합 (비트 값이 다른 경우에만 결과를 1)

비트의 시프트
시프트 (각 비트를 왼쪽 또는 오른쪽으로 이동하는 것) 밀려나간 비트는 삭제되고, 비는 부분에는 0이 저장됨
로테이트 (밀려나간 비트를 최상위 비트 또는 최하위 비트로 가져오는 것을 말합니다)

비트 연산으로 플래그 관리하기
or 연산자를 이용하면 임의로 상태 비트를 1로 할 수 있다.
플래그를 끄기 위해선 NOT과 AND를 조합해야 한다. 
해제하고 싶은 비트 패턴을 NOT하면, 끄고 싶은 자리 이외의 비트가 1이 된다. 그런 다음 AND 연산을 한다.
조건분기와 AND를 사용하면 특정 상태의 플래그가 켜져 있는지 판별할 수 있다. (판별하고 싶은 상태의 비트를 AND로 판별한다)
문자 코드 -> 1. 메모리에서 값을 꺼낸다. 2. 폰트 파일에서 해당하는 폰트를 찾는다. 3. 화면에 그린다. (문자 코드를 맞게 하더라도 폰트가 없으면 문자가 깨진다.)

UTF-16 (16bit unicode transformation Format) : 기본 문자느 2비트, 나머지 비주류 문자는 4바이트, UTF-16은 ASCII 코드와 호환성이 없다.
UTF -8 ASCII 코드 부분을 1바이트, 나머지 부분을 2~4바이트로 표현합니다. 한글 한 글자를 표현하는 데 3바이트를 사용합니다.

부호화 문자 집합 : 문자를 모은 리스트(유니코드), 각 문자에 번호가 할당 // 부호화식 : 문자를 어떤 비트열로 표현할 것인지 규정(UTF8 , 16 등)
바이너리에디터 : 파일 데이터를 1바이트씩 16진수로 표시하여 편집할 수 있는 소프트웨어
어드레스 : 데이터가 기록된 장소, 덤프 영억 : 파일 데이터 내용, 아스키 영역 :" 텍스트 형식으로 표시되는 부분으로 문자 코드에 따라 내용이 바뀜
BOM (BYte Order Mark) : 엔디언을 구분하기 위한 표시(FE FF 빅 엔디언, FF FE 리틀 엔디언)
디버그나 데이터 복원 등의 목적으로 메모리와 파일의 내용을 출력하는 일을 덤프라고 한다.
출력된 데이터를 덤프 리스트라고 한다.
데이터를 텍스트 형식으로 출력하는 도구가 많다.