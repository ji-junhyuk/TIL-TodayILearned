객체지향의 사실과 오해

이 책은 객체지향이란 무엇인가라는 ... 제 나름의 대답
객체지향으로 향하는 첫 걸음은 클래스가 아니라 객체를 바라보는 것에서부터 시작합니다. 객체지향으로 향하는 두 번째 걸음은 객체를 독립적인 존재가 아니라 기능을 구현하기 위해 협력하는 공동체의 존재로 바라보는 것입니다. 세 번째 걸음을 내디딜 수 있는지는 협력에 참여하는 객체들에게 얼마나 적절한 역활과 책임을 부여할 수 있느냐에 달려있습니다.

ch1. 협력하는 객체들의 공동체
(객체지향 패러다임의 핵심은 자율적인 객체들의 협력)
ch2. 이상한 나라의 객체
(객체는 상태와 행동, 식별자를 가진 존재)
ch3. 타입과 추상화
(가장 널리사용되는 추상화는 동적인 객체들을 단순화시켜 정적인 타입으로 갈무리)
ch4. 역활, 책임, 협력
(객체지향이라는 말에서 클래스와 상속을 떠올리겠지만 실은 역활, 책임, 협력이 핵심)
ch5. 책임과 메시지
(객체의 자율성과 설계의 유연성은 얼마나 훌룡한 메시지를 선택하느냐에 달려있다)
ch6. 객체 지도 
(도메인 모델과 객체지향 패러다임 사이의 관계)
ch7. 함께 모으기

Ch1.
시너지를 생각하라. 전체는 부분의 합보다 크다. -스티븐 코비-

객체지향의 목표는 실세계를 모방하는 것이 아니다. 오히려 새로운 세계를 창조하는 것이다. 소프트웨어 개발자의 역활은 단순히 실세계를 소프트웨어 안으로 옮겨 담는 것이 아니라 고객과 사용자를 만족시킬 수 있는 신세계를 창조하는 것이다.

-요청과 응답으로 구성된 협력(기능 구현, 역활과 책임 수행)
-역활과 책임
	->여러 사람이 동일한 역활을 수행할 수 있다.
	->역활은 대체 가능성을 의미한다.
	->책임을 수행하는 방법은 자율적으로 선택할 수 있다.
	->한 사람이 동시에 여러 역활을 수행할 수 있다.
-협력과 메시지
	->객체지향 세계에서는 오직 한 가지 의사소통 수단, 이를 메시지라고 한다.
	->객체가 수신된 메시지를 처리하는 방법을 메서드라고 부른다.
	
객체지향의 본질
-자율적인 객체들의 공동체
-상태와 행위를 함께 지니며 책임지는 객체
-협력, 역활을 수행하며 역활은 책임의 집합
-메시지를 수신한 객체는 이를 처리하는 데 적합한 메서드를 자율적으로 선택
	
	
ch2.
객체지향 패러다임은 지식을 추상화하고 추상화한 지식을 객체 안에 캡슐화함으로써 실세계 문제에 내재된 복잡성을 관리하려고 한다. 객체를 발견하고 창조하는 것은 지식과 행동을 구조화하는 문제다. -레베카 워프스브룩

세상을 더 작은 객체로 분해하는 것은 본질적으로 세상이 포함하고 있는 복잡성을 극복하기 위한 인간의 작은 몸부림이다. 인간은 좀 더 단순한 객체들로 주변을 분해함으로써 자신이 몸담고 있는 세상을 이해하려고 노력한다. 즉, 객체란 인간이 분명하게 인지하고 구별할 수 있는 물리적인 또는 개념적인 경계를 지닌 어떤 것이다.

객체의 상태를 구성하는 모든 특징을 통틀어 객체의 프로퍼티(property)라고 한다. 일반적으로 프로퍼티는 변경되지 않고 고정되기에 '정적'이다. 반면 프로퍼티 값(property value)은 시간이 흐름에 따라 변경되기 때문에 '동적'이다. 객체의 프로퍼티는 단순한 값과 다른 객체를 참조하는 링크로 구분할 수 있다.

객체의 행동은 이 두가지 관점의 부수효과를 명확하게 서술해야 한다.
-객체 자신의 상태 변경
-행동 내에서 협력하는 다른 객체에 대한 메시지 전송

식별자란 어떤 객체를 다른 객체와 구분하는 데 사용하는 객체의 프로퍼티다.

객체
-객체는 상태를 가지며 상태는 변경가능하다.
-객체의 상태를 변경시키는 것은 객체의 행동이다.
	->행동의 결과는 상태에 의존적이며 상태를 이용해 서술할 수 있다.
	->행동의 순서가 실행 결과에 영향을 미친다.
-객체는 어떤 상태에 있더라도 유일하게 식별 가능하다.

책임-주도 설계(Responsibility-Driven Design, RDD) - 협력이라는 문맥 안에서 객체의 행동을 생각하도록 도움으로써 응집도 높고 재사용 가능한 객체를 만들어야 한다.
협력안에서 객체의 행동은 결국 객체가 협력에 참여하면서 완수해야 하는 책임을 의미한다. 따라서 어떤 책임이 필요한가를 결정하는 과정이 전체 설계를 주도해야 한다.


ch3.
일단 컴퓨터를 조작하는 것이 추상화를 구축하고, 조작하고, 추론하는 것에 관한 모든 것이라는 것을 깨닫고 나면 (훌룡한)컴퓨터 프로그램을 작성하기 위한 중요한 전제 조건은 추상화를 정확하게 다루는 능력이라는 것이 명확해진다. - 키스 데블린

->벡의 지하철 노선도 "이 지도는 상식에 근거한 것입니다. 지하철을 갈아탈 때 지형때문에 골치아플 필요가 있을까요? 지형은 중요한 것이 아닙니다. 중요한 것은 연결, 즉 열차를 갈아타는 것입니다."

복잡성을 다루기 위한 추상화는 두 차원에서 이루어진다.
->첫 번째 차원은 구체적인 사물들 간의 공통점은 취하고 차이점은 버리는 일반화를 통해 단순하게 만드는 것이다.
->두 번째 차원은 중요한 부분을 강조하기 위해 불필요한 세부 사항을 제거함으로써 단순하게 만드는 것이다.
모든 경우에 추상화의 목적은 복잡성을 이해하기 쉬운 수준으로 단순화하는 것이라는 점을 기억하라

개념의 세 가지 관점
-심볼 : 개념을 가리키는 이름
-내연 : 개념의 의미
-외연 : 개념에 속하는 객체들

타입에 관련된 두 가지 중요한 사실
1. 타입은 데이터가 어떻게 사용되느냐에 관한 것이다. 숫자형 데이터가 숫자형인 이유는 데이터를 더하거나 빼거나 곱하거나 나눌 수 있기 때문이다. 어떤 데이터가 문자열인 이유는 두 데이터를 연결해 새로운 문자열을 만들 수 있고 데이터에 포함된 문자의 길이를 알 수 있기 때문이다.
2. 타입에 속한 데이터를 메모리에 어떻게 표현하는지는 외부로부터 철저하게 감춰진다.

객체는 데이터가 아니다. 객체에서 중요한 것은 객체의 행동이다. 객체를 창조할 때 가장 중요하게 고려해야 하는 것은 객체가 이웃하는 객체와 협력하기 위해 어떤 행동을 해야 할지를 결정하는 것이다. 데이터는 단지 행동을 따를 뿐이다.

흔히 책임 주도 설계(RDD)라고 부르는 객체지향 설계 방법은 데이터를 먼저 생각하는 데이터 주도 설계(Data-Driven-Design)방법의 단점을 개선하기 위해 고안됐다.

ch4. 
우리 모두를 합친 것보다 더 현명한 사람은 없다 - 켄 블랜차드

결론적으로 인간이 어떤 본질적인 특성을 지니고 있느냐가 아니라 어떤 상황에 처해 있느냐가 인간의 행동을 결정한다. 즉, 각 개인이 처해 있는 정황 또는 문ㅇ맥이 인간의 행동 방식을 결정한다는 것이다. 

요청하고 응답하며 협력하는 사람들

객체의 책임을 이야기할 때는 일반적으로 외부에서 접근 가능한 공용 서비스의 관점에서 이야기 한다. 즉, 책임은 객체의 외부에 제공해 줄 수 있는 정보와 외부에 제공해줄 수 있는 서비스의 목록이다. 따라서 책임은 객체의 공용 인터페이스를 구성한다.

한 가지 주의할 점은 책임과 메시지의 수준이 같지는 않다는 점이다. 책임은 상위 수준에서 개략적으로 서술한 것이다. 책임을 결정한 후 실제로 협력을 정제하면서 이를 메시지로 변환할 때는 하나의 책임이 여러 멧지ㅣ로 분할되는 것이 일반적이다.

역활은 객체지향 설계의 단순성(simplicity), 유연성(flexibility), 재사용성(reusability)을 뒷받침하는 핵심 개념이다.

객체지향 입문자들이 데이터나 클래스를 중심으로 애플리케이션을 설계하는 이유는 협력이라는 문맥을 고려하지 않고 각 객체를 독립적으로 바라보기 때문이다.

객체지향 설계 기법
1. 책임 주도 설계(RDD)
=> 현재 가장 널리 받아들여지는 설계 방법은 레베카 워프스브록이 고안한 책임-주도 설계방법이다.
	-시스템이 사용자에게 제공해야 하는 기능인 시스템 책임을 파악한다.
	-시스템 책임을 더 작은 책임으로 분할한다.
	-분할된 책임을 수행할 수 있는 적절한 객체 또는 역활을 찾아 책임을 할당한다.
	-객체가 책임을 수행하는 중 다른 객체의 도움이 필요한 경우 이를 책임질 적절한 객체 또는 역활을 찾는다.
	-해당 객체 또는 역활에게 책임을 할당함으로써 두 객체가 협력하게 한다.
"역활, 책임, 협력은 유연하고 견고한 객체지향 시스템을 만드는 데 필요한 가장 중요한 재료다. 그 외의 장치는 단지 역활, 책임, 협력을 보완하고 애플리케이션의 복잡도를 줄이기 위해 필요한 보조 재료일 뿐이다. 역활, 책임, 협력에 집중하라."

2. 디자인 패턴(Design pattern)
=> 관련된 가장 유명한 책은 GOF의 <디자인 패턴>으로 23개의 디자인 패턴들을 상세하게 정리해 놓았다.

3. 테스트-주도 개발(Test-Driven Development) 
=> 이름에서 풍기는 뉘앙스와 달리 테스트가 아니라 설계를 위한 기법이다. 테스트는 단지 테스트-주도 개발을 통해 얻을 수 있는 별도의 보너스 같은 것이며, 실제 목적은 구체적인 코드를 작성해나가면서 역활, 책임, 협력을 식별하고 식별된 역활, 책임, 협력이 적합한지 피드백받는 것이다.

ch5.
의도는 "메시징"이다. 훌룡하고 성장 가능한 시스템을 만들기 위한 핵심은 모듈 내부의 속성과 행동이 어떤가보다는 모듈이 어떻게 커뮤니케이션하는가에 달려 있다. - 엘런케이

자율적인 책임
-설계의 품질을 좌우하는 책임
-자신의 의지에 따라 행동할 수 있는 자유
(너무 추상적인 책임을 선택하지 말라), (어떻게가 아닌 무엇을 해야하는가를 설명해야 한다)

메시지를 수신한 객체가 실행 시간에 메서드를 선택할 수 있다는 사실은 다른 프로그래밍 언어와 객체지향 프로그래밍 언어를 구분 짓는 핵심적인 특징 중 하나다.

클래스는 단지 동적인 객체들의 특성과 행위를 정적인 텍스트로 표현하기 위해 사용할 수 있는 추상화 도구일 뿐이다. 중요한 것은 클래스가 아니라 객체다. 클래스를 정의하는 것이 먼저가 아니라 객체들의 속성과 행위를 식별하는 것이 먼저다.

'묻지 말고 시켜라'는 객체의 자율성을 보장한다. 어떤 객체가 존재하는지도 모르는데 어떻게 객체의 내부 상태를 가정할 수 있겠는가? 고민을 연기하라. 단지 필효한 메시지를 전송하기만 하고 메시지를 수신하는 객체가 스스로의 메시지 처리 방법을 결정하게 하라.

맷 와이스펠드는 객체지향적인 사고 방식을 이해하기 위해서는 다음의 세 가지 원칙이 중요한다고 주장한다. 이것들은 모두 객체 인터페이스에 관련된 것이다.
- 좀 더 추상적인 인터페이스
- 최소 인터페이스(외부에서 사용할 필요가 없다면 최대한 노출하지마라)
- 인터페이스와 구현 간에 차이가 있다는 점을 인식

인터페이스와 구현의 분리원칙 

객체지향의 강력함을 누리기 위한 출발점은 책임을 자율적으로 만드는 것이다. 그리고 이것은 여러분이 선택하는 메시지에 따라 달라진다.

ch6. 유일하게 변하지 않는 것은 모든 것이 변한다는 사실뿐이다. - 헤라클레이토스

소프트웨어 분야에서 예외가 없는 유일한 규칙은 요구사항이 항상 변경된다는 것이다. 설계라는 행위를 중요하게 만드는 것은 변경에 대한 필요성이다. 안타깝게도 변경을 피할 수 있는 방법은 없기 때문에 좋은 설계에 대한 압력 역시 피할 수 없다.

설계가 어려운 이유는 어제 약속했던 기능을 제공하는 동시에 내일 변경될지도 모르는 요구사항도 수용할 수 있는 코드를 창조해야 하기 때문이다. 요구사항을 만족시킬 수 있는 다양한 설계안들을 저울질하면서 그 결과로 단순하면서도 유연한 ㅅ설계를 창조하는 것은 공학이라기보다는 예술에 가깝다.

불확실한 미래의 변경을 예측하고 이를 성급하게 설계에 반영하는 것은 불필요하게 복잡한 설계를 낳을 뿐이다. 우리는 미래를 예측할 수 없다. 단지 대비할 수 있을 뿐이다.

미래에 대비하는 가장 좋은 방법은 변경을 예측하는 것이 아니라 변경을 수용할 수 있는 선택의 여지를 설계에 마련해 놓는 것이다. 훌룡한 설계자는 미래에 구체적으로 어떤 변경이 발생할 것인지를 예측하지 않는다. 단지 언젠가는 변경이 발생할 것이며 아직까지는 그것이 무언인지 모른다는 사실을 겸허하게 받아들인다. 좋은 설계는 나중에라도 변경할 수 있는 여지를 남겨 놓은 설계다.

사람들에게 길을 묻지 마라. 객체를 이용해 지도를 만들어라. 기능은 지도에 표시된 길을 따라 자연스럽게 흘러갈 것이다.

객체지향의 세계를 구축하기 위해서는 사용자에게 제공할 '기능'과 기능을 담을 안정적인 ;구조'라ㅣ는 재료가 준비돼 있어야 한다. 기능은 사용자가 자신의 목표를 달성하기 위해 사용할 수 있는 시스템의 서비스다. 구조는 시스템의 기능을 구현하기 위한 기반으로 기능 변경을 수용할 수 있도록 안정적이어야 한다.
- 구조는 사용자나 이해관계자들이 도메인에 관해 생각하는 개념과 개념들 간의 관계로 표현한다.
- 기능은 사용자의 목표를 만족시키기 위해 책임을 수행하는 시스템의 행위로 표현한다. 

ch7. 함께 모으기
코드와 모델을 밀접하게 연관시키는 것은 코드에 의미를 부여하고 모델을 적절하게 한다. -에릭 에반스

마틴 파울러는 객체지향 설계 안에 존재하는 세 가지 상호 연관된 관점에 관해 설명한다. 이를 각각 개념 관점, 명세 관점, 구현 관점이라고 부른다.
->개념 관점(Conceptual Perspective) : 설꼐는 도메인 안에 존재하는 개념과 개념들 사이의 관계를 표현한다. 도메인이란 사용자들이 관심을 가지고 있는 특정 분야나 주제를 말하며 소프트웨어는 도메인에 존재하는 무제를 해결하기 위해  따라서 실제 도메인의 규칙과 제약을 최대한 유사하게 반영하는 것이 핵심한다.

->명세 관점 : 사용자의 영역인 도메인을 벗어나 개발자의 영역인 소프트웨어로 초점이 옮겨진다. 객체가 협력을 위해 무엇을 할 수 있는가에 초점을 맞춘다. 가장 오래된 격언인 "구현이 아니라 인터페이스에 대해 프로그래밍 하라GOF"를 따르는 것은 명세 관점과 구현 관점을 명확하게 분리하는 것에서 부터 시작한다.

->구현 관점 : 프로그래머에게 가장 익숙한 관점으로 실제 작업을 수행하는 코드와 연관되어 있다. 따라서 객체의 책임을 어떻게 수행할 것인가에 초점을 맞추며 인터페이스를 구현하는 데 필요한 속성과 메서드를 클래스에 추가한다.

이런 관점의 순서대로 소프트웨어를 개발한다는 의미가 아니다. 개념 관점, 명세 관점, 구현 관점은 동일한 클래스를 세 가지 다른 방향에서 바라보는 것을 의미한다. 클래스가 은유하는 개념은 도메인 관점을 반영한다. 클래스의 공용 인터페이스는 명세 관점을 반영한다. 클래스의 속성과 메서드는 구현 관점을 반영한다.

이는 클래스를 어떻게 설계해야 하느냐에 대한 중요한 힌트를 암시한다. 클래스는 세가지 관점을 모두 수용할 수 있도록 개념, 인터페이스, 구현을 함께 드러내야 한다. 동시에 코드 안에서 세 가지 관점을 쉽게 식별할 수 있도록 깔끔하게 분리해야 한다.

부록A
추상화 기법
-분류와 인스턴스화 : 분류는 객체의 구체적인 세부 사항을 숨기고 인스턴스 간에 공유하는 ㅌ공통적인 특성을 기반으로 범주를 형성하는 과정이다. 분류의 역은 범주로부터 객체를 생성하는 인스턴스화 과정이다.
-일반화와 특수화 : 일반화는 범주 사이의 차이를 숨기고 범주 간에 공유하는 공통적인 특서을 강조한다. 일반화의 역을 특수화라고 한다.
- 집합과 분해 : 집합은 부분과 관련된 세부 사항을 숨기고 부분을 사용해서 전체를 형성하는 과정을 가리킨다. 집합의 반대 과정은 전체를 부분으로 분리하는 분해과정이다.

